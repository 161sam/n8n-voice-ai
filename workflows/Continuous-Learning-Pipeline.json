{
  "name": "Weekly Fine-tuning Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 2 * * 0"
            }
          ]
        }
      },
      "id": "t0u1v2w3-x4y5-6789-tuvw-098234567809",
      "name": "Weekly Fine-tuning Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "training_feedback",
          "mode": "list"
        },
        "where": {
          "conditions": [
            {
              "column": "created_at",
              "condition": "afterDate",
              "value": "={{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString() }}"
            },
            {
              "column": "status",
              "condition": "equal",
              "value": "validated"
            }
          ]
        }
      },
      "id": "u1v2w3x4-y5z6-7890-uvwx-109234567810",
      "name": "Collect Training Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-local",
          "name": "PostgreSQL Local"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "combineOperation": "all"
          },
          "conditions": [
            {
              "id": "condition3",
              "leftValue": "={{ $json.length }}",
              "rightValue": "{{ $vars.MIN_TRAINING_SAMPLES || 50 }}",
              "operation": "largerEqual"
            }
          ]
        }
      },
      "id": "v2w3x4y5-z6a7-8901-vwxy-210234567811",
      "name": "Check Training Threshold",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare training data in the required format\nconst trainingData = $input.all().map(item => ({\n  prompt: item.json.original_input,\n  completion: item.json.corrected_response || item.json.original_response,\n  metadata: {\n    interactionId: item.json.interaction_id,\n    feedback_score: item.json.feedback_score,\n    timestamp: item.json.created_at\n  }\n}));\n\n// Split into training and validation sets\nconst shuffled = trainingData.sort(() => 0.5 - Math.random());\nconst splitIndex = Math.floor(shuffled.length * 0.8);\n\nconst trainingSet = shuffled.slice(0, splitIndex);\nconst validationSet = shuffled.slice(splitIndex);\n\nreturn {\n  json: {\n    trainingData: trainingSet,\n    validationData: validationSet,\n    totalSamples: trainingData.length,\n    trainingSize: trainingSet.length,\n    validationSize: validationSet.length,\n    datasetId: `dataset_${Date.now()}`\n  }\n};"
      },
      "id": "w3x4y5z6-a7b8-9012-wxyz-321234567812",
      "name": "Prepare Training Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 240]
    },
    {
      "parameters": {
        "url": "http://ollama:11434/api/fine-tune",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"model\": \"{{ $vars.BASE_MODEL || 'llama3.2:8b' }}\",\n  \"training_data\": {{ JSON.stringify($json.trainingData) }},\n  \"validation_data\": {{ JSON.stringify($json.validationData) }},\n  \"hyperparameters\": {\n    \"learning_rate\": {{ $vars.LEARNING_RATE || 0.0001 }},\n    \"batch_size\": {{ $vars.BATCH_SIZE || 4 }},\n    \"epochs\": {{ $vars.EPOCHS || 3 }}\n  },\n  \"job_id\": \"finetune_{{ $json.datasetId }}\"\n}",
        "options": {
          "timeout": 7200000
        }
      },
      "id": "x4y5z6a7-b8c9-0123-xyza-432234567813",
      "name": "Start Fine-tuning Job",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 240],
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "model_versions",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "model_id": "={{ $json.job_id }}",
            "base_model": "={{ $vars.BASE_MODEL || 'llama3.2:8b' }}",
            "training_samples": "={{ $('Prepare Training Data').item.json.totalSamples }}",
            "status": "training",
            "created_at": "={{ new Date().toISOString() }}",
            "dataset_id": "={{ $('Prepare Training Data').item.json.datasetId }}"
          }
        }
      },
      "id": "y5z6a7b8-c9d0-1234-yzab-543234567814",
      "name": "Log Training Job",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [1340, 240],
      "credentials": {
        "postgres": {
          "id": "postgres-local",
          "name": "PostgreSQL Local"
        }
      }
    },
    {
      "parameters": {
        "url": "{{ $vars.SLACK_WEBHOOK_URL }}",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"text\": \"ü§ñ Fine-tuning job started\",\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Fine-tuning Job Started*\\n\\n*Job ID:* {{ $('Start Fine-tuning Job').item.json.job_id }}\\n*Training Samples:* {{ $('Prepare Training Data').item.json.totalSamples }}\\n*Base Model:* {{ $vars.BASE_MODEL || 'llama3.2:8b' }}\\n*Started:* {{ new Date().toISOString() }}\"\n      }\n    }\n  ]\n}"
      },
      "id": "z6a7b8c9-d0e1-2345-zabc-654234567815",
      "name": "Notify Training Start",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 240],
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "{{ $vars.SLACK_WEBHOOK_URL }}",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"text\": \"‚ö†Ô∏è Insufficient training data\",\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Fine-tuning Skipped*\\n\\n*Reason:* Insufficient training data\\n*Available Samples:* {{ $('Collect Training Data').all().length }}\\n*Required Minimum:* {{ $vars.MIN_TRAINING_SAMPLES || 50 }}\\n*Date:* {{ new Date().toISOString() }}\"\n      }\n    }\n  ]\n}"
      },
      "id": "a7b8c9d0-e1f2-3456-abcd-765234567816",
      "name": "Notify Insufficient Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 400],
      "continueOnFail": true
    }
  ],
  "connections": {
    "Weekly Fine-tuning Schedule": {
      "main": [
        [
          {
            "node": "Collect Training Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Training Data": {
      "main": [
        [
          {
            "node": "Check Training Threshold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Training Threshold": {
      "main": [
        [
          {
            "node": "Prepare Training Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notify Insufficient Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Training Data": {
      "main": [
        [
          {
            "node": "Start Fine-tuning Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Fine-tuning Job": {
      "main": [
        [
          {
            "node": "Log Training Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Training Job": {
      "main": [
        [
          {
            "node": "Notify Training Start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": null,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-25T00:00:00.000Z",
  "versionId": "1"
}
